{"ast":null,"code":"import * as types from '../constants/ActionTypes';\nimport * as AuthService from '../service/AuthService';\nexport const register = user => dispatch => {\n  return AuthService.register(user).then(res => {\n    console.log(\"res redux: \" + JSON.stringify(res));\n    if (res.data.errrCode >= 0) {\n      dispatch({\n        type: types.REGISTER_SUCCESS\n      });\n      dispatch({\n        type: types.SET_MESSAGE,\n        payload: {\n          errC: res.data.errCode,\n          errM: res.data.errMessage\n        }\n      });\n      return Promise.resolve();\n    } else {\n      dispatch({\n        type: types.REGISTER_FAIL\n      });\n      dispatch({\n        type: types.SET_MESSAGE,\n        payload: {\n          errC: res.data.errCode,\n          errM: res.data.errMessage\n        }\n      });\n      return Promise.resolve();\n    }\n  }).catch(error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: types.REGISTER_FAIL\n    });\n    dispatch({\n      type: types.SET_MESSAGE,\n      payload: {\n        errC: -201,\n        message\n      }\n    });\n    return Promise.reject();\n  });\n};\nexport const login = user => dispatch => {\n  return AuthService.login(user).then(res => {\n    if (res.data.errCode === 0) {\n      console.log(\"res redux: \" + JSON.stringify(res));\n      dispatch({\n        type: types.LOGIN_SUCCESS,\n        payload: {\n          user: res.data.user\n        }\n      });\n      dispatch({\n        type: types.SET_MESSAGE,\n        payload: {\n          errC: res.data.errCode,\n          errM: res.data.errMessage\n        }\n      });\n      return Promise.resolve();\n    } else {\n      console.log(\"res redux --: \" + JSON.stringify(res));\n      dispatch({\n        type: types.LOGIN_FAIL\n      });\n      dispatch({\n        type: types.SET_MESSAGE,\n        payload: {\n          errC: res.data.errCode,\n          errM: res.data.errMessage\n        }\n      });\n      return Promise.resolve();\n    }\n  }).catch(error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: types.LOGIN_FAIL\n    });\n    dispatch({\n      type: types.SET_MESSAGE,\n      payload: {\n        errC: -201,\n        message\n      }\n    });\n    return Promise.reject();\n  });\n};\nexport const logout = () => dispatch => {\n  return AuthService.logout().then(res => {\n    if (res.data.errrCode === 0) {\n      dispatch({\n        type: types.LOGOUT\n      });\n      dispatch({\n        type: types.SET_MESSAGE,\n        payload: {\n          errC: res.data.errCode,\n          errM: res.data.errMessage\n        }\n      });\n      return Promise.resolve();\n    } else {\n      dispatch({\n        type: types.LOGOUT\n      });\n      dispatch({\n        type: types.SET_MESSAGE,\n        payload: {\n          errC: res.data.errCode,\n          errM: res.data.errMessage\n        }\n      });\n      return Promise.resolve();\n    }\n  }).catch(error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: types.LOGOUT\n    });\n    dispatch({\n      type: types.SET_MESSAGE,\n      payload: {\n        errC: -201,\n        message\n      }\n    });\n    return Promise.reject();\n  });\n};\nexport const firstAccess = () => dispatch => {\n  return AuthService.firstAccess().then(res => {\n    if (res.data.errCode === 0) {\n      console.log(\"res redux: \" + JSON.stringify(res));\n      dispatch({\n        type: types.LOGIN_SUCCESS,\n        payload: {\n          user: res.data.user\n        }\n      });\n      dispatch({\n        type: types.SET_MESSAGE,\n        payload: {\n          errC: res.data.errCode,\n          errM: res.data.errMessage\n        }\n      });\n      return Promise.resolve();\n    } else {\n      console.log(\"res redux --: \" + JSON.stringify(res));\n      dispatch({\n        type: types.LOGIN_FAIL\n      });\n      return Promise.resolve();\n    }\n  }).catch(error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: types.LOGIN_FAIL\n    });\n    dispatch({\n      type: types.SET_MESSAGE,\n      payload: {\n        errC: -201,\n        message\n      }\n    });\n    return Promise.reject();\n  });\n};","map":{"version":3,"names":["types","AuthService","register","user","dispatch","then","res","console","log","JSON","stringify","data","errrCode","type","REGISTER_SUCCESS","SET_MESSAGE","payload","errC","errCode","errM","errMessage","Promise","resolve","REGISTER_FAIL","catch","error","message","response","toString","reject","login","LOGIN_SUCCESS","LOGIN_FAIL","logout","LOGOUT","firstAccess"],"sources":["/home/thom/Workspace/Mioto/BT2_3/profile-management-webapp/src/actions/UserAuthen.jsx"],"sourcesContent":["import * as types from '../constants/ActionTypes';\nimport * as AuthService from '../service/AuthService';\n\nexport const register = user => (dispatch) => {\n    return AuthService.register(user)\n        .then(res => {\n            console.log(\"res redux: \" + JSON.stringify(res))\n            if(res.data.errrCode >= 0){\n                dispatch({\n                    type: types.REGISTER_SUCCESS,\n                });\n            \n                dispatch({\n                    type: types.SET_MESSAGE,\n                    payload: { errC: res.data.errCode, errM: res.data.errMessage},\n                });\n            \n                return Promise.resolve();\n            }else{\n                dispatch({\n                    type: types.REGISTER_FAIL,\n                });\n            \n                dispatch({\n                    type: types.SET_MESSAGE,\n                    payload: { errC: res.data.errCode, errM: res.data.errMessage},\n                });\n            \n                return Promise.resolve();\n            }\n        })\n        .catch(error => {\n            const message =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n\n            dispatch({\n                type: types.REGISTER_FAIL,\n            });\n\n            dispatch({\n                type: types.SET_MESSAGE,\n                payload: {errC: -201, message},\n            });\n\n            return Promise.reject();\n        });\n}\n\nexport const login = user => (dispatch) => {\n    return AuthService.login(user)\n        .then(res => {\n            \n            if(res.data.errCode === 0){\n                console.log(\"res redux: \" + JSON.stringify(res))\n                dispatch({\n                    type: types.LOGIN_SUCCESS,\n                    payload: {user: res.data.user}\n                });\n            \n                dispatch({\n                    type: types.SET_MESSAGE,\n                    payload: { errC: res.data.errCode, errM: res.data.errMessage},\n                });\n            \n                return Promise.resolve();\n            }else{\n                console.log(\"res redux --: \" + JSON.stringify(res))\n                dispatch({\n                    type: types.LOGIN_FAIL,\n                });\n            \n                dispatch({\n                    type: types.SET_MESSAGE,\n                    payload: { errC: res.data.errCode, errM: res.data.errMessage},\n                });\n            \n                return Promise.resolve();\n            }\n        })\n        .catch(error => {\n            const message =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n\n            dispatch({\n                type: types.LOGIN_FAIL,\n            });\n\n            dispatch({\n                type: types.SET_MESSAGE,\n                payload: {errC: -201, message},\n            });\n\n            return Promise.reject();\n        });\n}\n\nexport const logout = () => (dispatch) => {\n    return AuthService.logout()\n        .then(res => {\n            if(res.data.errrCode === 0){\n                dispatch({\n                    type: types.LOGOUT,\n                });\n            \n                dispatch({\n                    type: types.SET_MESSAGE,\n                    payload: { errC: res.data.errCode, errM: res.data.errMessage},\n                });\n            \n                return Promise.resolve();\n            }else{\n                dispatch({\n                    type: types.LOGOUT,\n                });\n            \n                dispatch({\n                    type: types.SET_MESSAGE,\n                    payload: { errC: res.data.errCode, errM: res.data.errMessage},\n                });\n            \n                return Promise.resolve();\n            }\n        })\n        .catch(error => {\n            const message =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n\n            dispatch({\n                type: types.LOGOUT,\n            });\n\n            dispatch({\n                type: types.SET_MESSAGE,\n                payload: {errC: -201, message},\n            });\n\n            return Promise.reject();\n        });\n}\n\nexport const firstAccess = () => (dispatch) => {\n    return AuthService.firstAccess()\n        .then(res => {\n            if(res.data.errCode === 0){\n                console.log(\"res redux: \" + JSON.stringify(res))\n                dispatch({\n                    type: types.LOGIN_SUCCESS,\n                    payload: {user: res.data.user}\n                });\n            \n                dispatch({\n                    type: types.SET_MESSAGE,\n                    payload: { errC: res.data.errCode, errM: res.data.errMessage},\n                });\n            \n                return Promise.resolve();\n            }else{\n                console.log(\"res redux --: \" + JSON.stringify(res))\n                dispatch({\n                    type: types.LOGIN_FAIL,\n                });\n        \n                return Promise.resolve();\n            }\n        })\n        .catch(error => {\n            const message =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n\n            dispatch({\n                type: types.LOGIN_FAIL,\n            });\n\n            dispatch({\n                type: types.SET_MESSAGE,\n                payload: {errC: -201, message},\n            });\n\n            return Promise.reject();\n        });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}